openapi: 3.0.1
info:
  title: ðŸ¥‘ Avocado
  description: 'Developer Relations means relating to developers. There are millions of developers. How do you relate to them all? What are you metrics? Where do you even get started? Avocado is an out-of-the-box developer relations system, with your success at heart.'
  contact:
    email: parkerkrhoyt@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Avocado
  url: http://kevinhoyt.com
servers:
- url: http://localhost:8000/api
tags:
- name: Label
  description: Logical groupings of developers (tagging)
- name: Developer
  description: Individual developers - and advocates
paths:
  /label:
    get:
      tags:
      - Label
      summary: Read all available labels
      operationId: getLabelAll
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
    post:
      tags:
      - Label
      summary: Create a new label
      operationId: createLabel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: IBM
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'        
  /label/{id}:
    parameters:
    - name: id
      in: path
      description: ID field for desired label
      required: true
      schema:
        type: string
        format: uuid      
    get:
      tags:
      - Label
      summary: Read specific label by ID
      operationId: getLabelByID
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
    put:
      tags:
      - Label
      summary: Update specific label by ID
      operationId: updateLabel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: IBM
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'                          
    delete:
      tags:
      - Label
      summary: Delete specific label by ID
      operationId: deleteLabelByID
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
  /developer:
    get:
      tags:
      - Developer
      summary: Read all developers
      operationId: getDeveloperAll
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Developer'  
    post:
      tags:
      - Developer
      summary: Create a new developer
      operationId: createDeveloper
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first:
                  type: string
                  example: Kevin
                last:
                  type: string
                  example: Hoyt
                nickname:
                  type: string
                  example: The Dude
                email:
                  type: string
                  example: krhoyt@us.ibm.com
                notes: 
                  type: string
                  example: That creep can roll, man!
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Developer'                   
components:
  schemas:
    Developer:
      required:
      - first
      - last
      type: object
      properties:
        id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        first:
          type: string
          example: Kevin
        last:
          type: string
          example: Hoyt
        nickname:
          type: string
          example: The Dude
        email:
          type: string
          example: krhoyt@us.ibm.com
        notes:
          type: string
          example: That creep can roll, man!
    Label:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        name:
          type: string
          example: IBM
